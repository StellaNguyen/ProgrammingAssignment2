class(cls_list)
as.character(cls_list)
play()
as.number(cls_lisy)
as.numbers(cls_list)
?as.character
as.vector(cls_list)
nxt()
?sapply
cls_vect
cls_vect <-lapply(flags)
cls_vect<-lapply(flags, class)
cls_vect<-sapply(flags,class)
class(cls_vect)
play()
sum(flags$orange)
sum(flags[[orange]])
sum(flags[orange])
nxt()
sum(flags$orange)
flags_colors<-flags[,11:17]
flag_colors<-flags[,11:17]
head()
head(flag_colors)
play()
flags
dim(flags)
head(flags)
?head
head(flag_colors, 2)
head(flag_colors, n=10)
nxt()
lapply(flag_colors, sum)
sapply(flag_colors, sum)
play()
l_apply<-lapply(flag_colours, sum)
l_apply<-lapply(flag_colors,sum)
class(l_apply)
s_apply<-sapply(flag_colors,sum)
class(s_apply)
s_apply
?sapply
nxt()
sapply(flag_coclors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes, range)
shape_mate
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
flags
lapply(unique_vals, function(heyhey) heyhey[2])
swirl()
play()
?str()
str(flags)
summary(flags)
summary(x)
x
str(x)
nxt()
sapply(flags,unique)
play()
prompt(>)
promt()
?promt
??promt
prompt(>)
?prompt
nxt()
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
sum(flags$orange)
sum(flags$landmass)
flags$landmass
flags$orange
nxt()
table(flag$animate)
table(flags$animate)
tapply(flag$animate, flags$landmass, mean)
play()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$landmass, flags$animate, mean)
nxt()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
inside.names(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
library(swirl)
swirl()
submit()
mad_lib("hi", "hi", "hi")
mad_libs("hi", "hi", "hi")
submit()
submit()
submit()
submit
submit()
play()
"%p%" <- function(left, right){
c(left, right)
}
"Hello" %p% "Students"
"%p%" <- function(left, right){
paste(left, right)
}
"hello" %p% "students"
func1 <- "hello" %p% "students"
func1
class(funct1)
class(func1)
func2<- 1 %p% 2
func2
class(func2)
nxt()
"I" %p% "love" %p% "R"
'I' %p% 'love' %p% 'R'
"I" %p% "love" %p% "R!"
bye()
getwd
getwd()
read.csv("hw1_data", header= TRUE)
read.csv(hw1_data, header=TRUE)
read.csv("hw1_data.csv", header= TRUE)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
pollutantmean <- function(directory, pollutant, id) {
# part 1.1- set directory as working directory to look for the file
setwd(directory)
# general idea: when argument 'id' is assigned a value-> we know how many monitors and which monitors we need to check the pollutant amount -> we create a loop to read each of monitors data with i runs from id[first] to id[last]-> each time the loop runs, we read the data, detect missing value, find the mean of pollutant over the given data. When the loop finishes, the final mean (for all monitors )is computed by taking the mean of all means
amount <- 0 # to save the total pollutant amount (after the end of the loop)
i=id[1] # the first element of id
last_id<-id[length(id)] # the last element of id
while (i < (last_id +1)){ # create a loop: i running from 1 to last
file_name <-sprintf("%03d.csv",i) # automatically create the name of file
data <-read.csv(file_name) # read the corresponding file
if (pollutant=="sulfate") # all of these steps is to decide which pollutant we should calculate and eliminate the missing value
{
x= data[,2]
bad=is.na(x)
y<-x[!bad]
m = mean(y)
}
else
{
x= data[,3]
bad=is.na(x)
y<-x[!bad]
m = mean(y)
}
amount <- amount + m
i<-i+1 # this is for going to the next i
}
pollutantmean<- mean(amount) # mean of all means
return(pollutantmean)
}
submit()
setwd(directory)
directory <- source("hw1_data.csv")
directory
complete <- function(directory, id) {
setwd(directory)
# similar to pollutantmean, we run the loop from id[1] to id[last]
?match.fun
function(x, FUN, ...)
{
FUN <- match.fun(FUN)
if(!is.vector(x) || is.object(x))
x <-as.list(x)
.Internal(lapply(x, FUN))
}
?lapply
?runif
str(apply)
str(lapply)
str(sapply)
str(vapply)
str(mean)
x<-(1:24,c(2,3,4))
x<-c(1:24, c(2,3,4))
x
y<-c(1:6,c(2,3))
y
x<-1:24
1
x
dim(x) <- c(2,3,4)
x
apply(x,3, mean)
apply(x,1,mean)
apply(x,2,mean)
?arrayMeans
??arraymean
?ArMeans
z<-matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25,0.5,0.75))
apply(x, 1, quantile, probs = c(0.25,0.75))
x
apply(z, 1, quantile, probs = c(0.25,0.5,0.75))
a<-array(rnorm(2*2*10), c(2,10,10))
a
a<-array(rnorm(2,2,10), c(2,2,10))
a
?mapply
testing <- function(matrix (1:4,2,2),function(elem) elem[ ,2])
function(elem) elem[,2]
?gl
x<- c(rnorm(10), runif(10), rnorm(10,1))
f<- gl(3,10)
tapply(x,f,mean)
?apply
?dummy
?dummy.function
??dummy
?interaction()
str(gl)
?gl
?interaction
?split
?warning()
library(datasets)
data(iris)
?iris
iris
lapply(iris)
lapply(iris$species, mean)
lapply(Sepal.Length, mean)
lapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, mean)
apply(iris, 2, mean)
apply(iris, [,1:4],2,mean)
apply(iris[,1:4],2,mean)
apply(iris[101:150,1],2,mean)
apply(iris[101:150,1:4],2,mean)
apply(iris[101:150,1],2,mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(mtcars, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp,cyl,mean))
209.21429 -82.63636
?lm
?with
within(mtcars, tapply(hp,cyl,mean))
with(mtcars, tapply(hp,cyl,mean))
str(set.seed)
?set.seed
?set.seed
set.seed(1)
rnorm(5)
?log.mu
??log.mu
?exp()
sys.time({
n<-1000
r<-numeric (n)
for (i in 1:n){
x<-rnorm(n)
r[i]<-mean(x)
}
})
system.time({
n<-1000
r<-numeric (n)
for (i in 1:n){
x<-rnorm(n)
r[i]<-mean(x)
}
})
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5.2)
rpois(5,2)
?spois
?rpois
set.seed(2)
rpois(5,2)
> set.seed(2)
> rpois(5,2)
set.seed(2)
rpois(5,2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1<-1
x2<-2
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
fit()4
fit(3,4)
fit
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
cachedInverse <- NULL
set <- function(y) {
x <<- y
cachedInverse <<- NULL
}
get <- function() x
setInverse <- function(inverse) cachedInverse <<- inverse
getInverse <- function() cachedInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invFunc <- x$getInverse()
if(!is.null(invFunc)) {
message("getting cached data")
return(invFunc)
}
data <- x$get()
invFunc <- solve(data, ...)
x$setInverse(invFunc)
invFunc
}
makeCacheMatrix <- function(x = matrix()) {
cachedInverse <- NULL
set <- function(y) {
x <<- y
cachedInverse <<- NULL
}
get <- function() x
setInverse <- function(inverse) cachedInverse <<- inverse
getInverse <- function() cachedInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invFunc <- x$getInverse()
if(!is.null(invFunc)) {
message("getting cached data")
return(invFunc)
}
data <- x$get()
invFunc <- solve(data, ...)
x$setInverse(invFunc)
invFunc
}
}
traceback()
debug()
debug(cacheSove)
debug(cacheSolve)
> myvec
[1]  1  2  3  4  5  6  7  8  9 10
> foo <- makeVector(myvec)
myvec
[1]  1  2  3  4  5  6  7  8  9 10
myvec
myvec<-vector(1:10)
myvec <- c(1:10)
myvec
foo <_ makeVector(myvec)
foo<- makeVector(myvec)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
myvec
foo<-makeVector(x = myvec)
foo<-makeVector(myvec)
foo$get
foo$get()
class(foo)
foo$getmean
foo$getmean()
a <- makeVector(c(1,2,3,4))
cachemean(a)
get(foo)
get[foo]
?get
foo$get
foo$get()
?x$get()
fooE<-environtment(foo$set)
fooE <- environment(foo$set)
ls(fooE)
?ls(0)
fooE<-environment(foo$get)
get("x",fooE)
get("m",fooE)
makeCacheMatrix <- function(x = matrix()) {
cachedInverse <- NULL
set <- function(y) {
x <<- y
cachedInverse <<- NULL
}
get <- function() x
setInverse <- function(inverse) cachedInverse <<- inverse
getInverse <- function() cachedInverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invFunc <- x$getInverse()
if(!is.null(invFunc)) {
message("getting cached data")
return(invFunc)
}
data <- x$get()
invFunc <- solve(data, ...)
x$setInverse(invFunc)
invFunc
}
x<-matrix(c(3,3.2,3.5,3.6),2,2)
solve(x)
a<-makeCacheMatrix(c(3,3.2,3.5,3.6),2,2)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
getting cached data
inv <- cacheSolve(x)
ls()
setwd("C:/Users/Stella Nguyen/Downloads/R Programming/ProgrammingAssignment2")
getwd()
ls()
ls()
source('C:/Users/Stella Nguyen/Downloads/R Programming/ProgrammingAssignment2/cachematrix.R')
